<?xml version="1.0" encoding="utf-8"?>

<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="362" height="330" 
		 xmlns:esri="http://www.esri.com/2008/ags"		 
		 initialize="init();">
	<fx:Script>
		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.GeometryServiceEvent;
			import com.esri.ags.events.QueryEvent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.tasks.GeometryService;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.Query;
			import com.esri.ags.tasks.supportClasses.StatisticDefinition;
			import com.esri.ags.utils.GeometryUtil;
			
			import flash.sampler.NewObjectSample;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.events.FaultEvent;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			public static var dgArr:ArrayCollection=new ArrayCollection();
			
			[Bindable]
			public var spatialRelationshipOptions_linear:ArrayCollection = new ArrayCollection(
				[
					{ data: Query.SPATIAL_REL_CROSSES, label: "贯穿画线" },
					{ data: Query.SPATIAL_REL_INTERSECTS, label: "与画线相交" },
					{ data: Query.SPATIAL_REL_WITHIN, label: "包含画线" }
				]);
			
			[Bindable]
			public var spatialRelationshipOptions_area:ArrayCollection = new ArrayCollection(
				[
					{ data: Query.SPATIAL_REL_CONTAINS, label: "在所选区域之中" },
					{ data: Query.SPATIAL_REL_INTERSECTS, label: "与所选区域相交或重叠" },
					{ data: Query.SPATIAL_REL_OVERLAPS, label: "与所选区域相交" },
					{ data: Query.SPATIAL_REL_WITHIN, label: "与所选区域重叠" }
				]);
			
			// Step 1. Draw something
			protected function tbb_changeHandler(event:IndexChangeEvent):void
			{
				var selectedItem:Object = ButtonBar(event.currentTarget).selectedItem;
				if (tbb.selectedIndex < 0)
				{
					// when toggling a tool off, deactivate it
					myDrawTool.deactivate();
				}
				else
				{
					switch (selectedItem.label)
					{
						case "POLYLINE":
						{
							myDrawTool.activate(DrawTool.POLYLINE);
							spatialRel.dataProvider = spatialRelationshipOptions_linear;
							break;
						}
						case "FREEHAND_POLYLINE":
						{
							myDrawTool.activate(DrawTool.FREEHAND_POLYLINE);
							spatialRel.dataProvider = spatialRelationshipOptions_linear;
							break;
						}
						case "POLYGON":
						{
							myDrawTool.activate(DrawTool.POLYGON);
							spatialRel.dataProvider = spatialRelationshipOptions_area;
							break;
						}
						case "FREEHAND_POLYGON":
						{
							myDrawTool.activate(DrawTool.FREEHAND_POLYGON);
							spatialRel.dataProvider = spatialRelationshipOptions_area;
							break;
						}
						case "EXTENT":
						{
							myDrawTool.activate(DrawTool.EXTENT);
							spatialRel.dataProvider = spatialRelationshipOptions_area;
							break;
						}
						case "CIRCLE":
						{
							myDrawTool.activate(DrawTool.CIRCLE);
							spatialRel.dataProvider = spatialRelationshipOptions_area;
							break;
						}
						case "ELLIPSE":
						{
							myDrawTool.activate(DrawTool.ELLIPSE);
							spatialRel.dataProvider = spatialRelationshipOptions_area;
							break;
						}
					}
				}
			}
			
			// Step 1.1 Draw something from menu
			protected function menu_changeHandler(event:MenuEvent):void
			{
				var selectedItem:String = event.label;
				if (mnBr.selectedIndex < 0)
				{
					// when toggling a tool off, deactivate it
					myDrawTool.deactivate();
				}
				else
				{
					switch (selectedItem)
					{
						case "多段线":
						{
							myDrawTool.activate(DrawTool.POLYLINE);
							spatialRel.dataProvider = spatialRelationshipOptions_linear;
							break;
						}
						case "自由画线":
						{
							myDrawTool.activate(DrawTool.FREEHAND_POLYLINE);
							spatialRel.dataProvider = spatialRelationshipOptions_linear;
							break;
						}
						case "多边形":
						{
							myDrawTool.activate(DrawTool.POLYGON);
							spatialRel.dataProvider = spatialRelationshipOptions_area;
							break;
						}
						case "自由多边形":
						{
							myDrawTool.activate(DrawTool.FREEHAND_POLYGON);
							spatialRel.dataProvider = spatialRelationshipOptions_area;
							break;
						}
						case "长方形":
						{
							myDrawTool.activate(DrawTool.EXTENT);
							spatialRel.dataProvider = spatialRelationshipOptions_area;
							break;
						}
						case "圆":
						{
							myDrawTool.activate(DrawTool.CIRCLE);
							spatialRel.dataProvider = spatialRelationshipOptions_area;
							break;
						}
						case "椭圆":
						{
							myDrawTool.activate(DrawTool.ELLIPSE);
							spatialRel.dataProvider = spatialRelationshipOptions_area;
							break;
						}
						case "deactive":
						{
							myDrawTool.deactivate();
							//spatialRel.dataProvider.removeAll();
							spatialRel.dataProvider=null;
							myGraphicsLayer.clear();
							Alert.show("Runned2");
							break;
						}
					}
				}
			}
			
			
			// Step 2. Make sure input polygon is topologically correct
			protected function myDrawTool_drawEndHandler(event:DrawEvent):void
			{
				// reset after finished drawing a feature				
				myDrawTool.deactivate();
				tbb.selectedIndex = -1;
				var geometry:Geometry = event.graphic.geometry;
				if (geometry is Polygon && GeometryUtil.polygonSelfIntersecting(geometry as Polygon))
				{
					// Note: As of version 2.0, GeometryService returns geometries (instead of graphics).
					myGeometryService.simplify([ geometry ]);
				}
				else
				{
					doQuery(geometry);
				}
			}
			
			// Step 3 (only for polygons that are self intersecting).
			private function myGeometryService_simplifyCompleteHandler(event:GeometryServiceEvent):void
			{
				// Note: As of version 2.0, GeometryService returns geometries (instead of graphics)
				doQuery(event.result[0] as Geometry);
			}
			
			// Step 4. query using drawn graphic
			private function doQuery(geom:Geometry):void
			{
				try
				{
					var query:Query = new Query();
					
										
					query.spatialRelationship = spatialRel.selectedItem.data;
					query.outFields=["LNDVALUE", "SCHLTXCD", "CNTASSDVAL"]
					query.geometry = geom;
					query.returnGeometry = true;
					queryTask.execute(query, new AsyncResponder(onResult, onFault));
					
					function onResult(featureSet:FeatureSet, token:Object = null):void
					{
						if (featureSet.features.length > 0)
						{
							for each (var myGraphic:Graphic in featureSet.features)
							{
								myGraphicsLayer.add(myGraphic);
							}
						}
						else
						{
							Alert.show("未发现地块", "请再选一次");
						}
					}
					function onFault(info:Object, token:Object = null):void
					{
						Alert.show(info.faultString + "\n\n" + info.faultDetail, "queryTask fault " + info.faultCode);
					}
				}
				catch (error:Error)
				{
					Alert.show(error.toString(), "myGeometryService_simplifyCompleteHandler error");
				}
			}
			
			protected function queryTask_faultHandler(event:FaultEvent):void
			{
				Alert.show(event.fault.faultString + "\n\n" + event.fault.faultDetail, "QueryTask Fault " + event.fault.faultCode);
			}
			
			protected function myGeometryService_faultHandler(event:FaultEvent):void
			{
				Alert.show(event.fault.faultString + "\n\n" + event.fault.faultDetail, "GeometryService Fault " + event.fault.faultCode);
			}
			
			protected function sumLabelFunction(item:Object, column:GridColumn):String
			{
				return numberFormatter.format(item["POP_SUM"]);
			}
			
			protected function queryTask_executeCompleteHandler(event:QueryEvent):void
			{
				var fields:Array = event.featureSet.fields;
				var attributes:Array = event.featureSet.attributes;				
				 dgArr= new ArrayCollection(attributes);
				 result_pnl.arr=dgArr;
				 dg.dataProvider=dgArr;				 
//				dgArr = new ArrayCollection(attributes);
			}
			
			import mx.events.MenuEvent;
			
			protected function menubar1_itemClickHandler(event:MenuEvent):void
			{
				Alert.show(event.item.label,"ItemClick");
			}
			
			import mx.collections.ArrayCollection;
			
			[Embed("assets/i_draw_line.png")]
			public const Line:Class;
			
			[Embed("assets/i_draw_freeline.png")]
			public const FreeLine:Class;
			
			[Embed("assets/i_draw_poly.png")]
			public const Poly:Class;
			
			[Embed("assets/i_draw_freepoly.png")]
			public const FreePoly:Class;
			
			[Embed("assets/i_draw_rect.png")]
			public const Rect:Class;
			
			[Embed("assets/i_draw_circle.png")]
			public const Circle:Class;
			
			[Embed("assets/i_draw_ellipse.png")]
			public const Ellipse:Class;
			
			[Bindable]
			public static var arrColl:ArrayCollection;
			
			public function init():void {
				/* BorderContainer */
				var borderContainerProperties:Array = [];
				borderContainerProperties.push({label:"多段线", icon:Line, id: "POLYLINE"});
				borderContainerProperties.push({label:"自由画线", icon:FreeLine, id:"FREEHAND_POLYLINE"});
				borderContainerProperties.push({label:"多边形", icon:Poly, id:"POLYGON"});
				borderContainerProperties.push({label:"自由多边形", icon:FreePoly, id:"FREEHAND_POLYGON"});
				borderContainerProperties.push({label:"长方形", icon:Rect, id:"EXTENT"});
				borderContainerProperties.push({label:"圆", icon:Circle, id:"CIRCLE"});
				borderContainerProperties.push({label:"椭圆", icon:Ellipse, id:"ELLIPSE"});
				
				var borderContainerMethods:Array = [];
				borderContainerMethods.push({label:"deactive"});
				
				var borderContainerStyles:Array = [];
				borderContainerStyles.push({label:"backgroundImage : Object"});
				borderContainerStyles.push({label:"backgroundImageFillMode : String"});
				borderContainerStyles.push({label:"borderAlpha : Number"});
				borderContainerStyles.push({label:"borderColor : uint"});
				borderContainerStyles.push({label:"borderStyle : String"});
				borderContainerStyles.push({label:"borderVisible : Boolean"});
				borderContainerStyles.push({label:"borderWeight : Number"});
				borderContainerStyles.push({label:"cornerRadius : Number"});
				borderContainerStyles.push({label:"dropShadowVisible : Boolean"});
				
				var borderContainerEvents:Array = [];
				
				var borderContainerObj:Object = {label:"BorderContainer",
					children:[{label:"Properties:", children:borderContainerProperties},
						{label:"Methods:", children:borderContainerMethods},
						{label:"Styles:", children:borderContainerStyles},
						{label:"Events:", children:borderContainerEvents}]};
				
				/* Button */
				var buttonProperties:Array = [];
				var buttonMethods:Array = [];
				var buttonStyles:Array = [];
				var buttonEvents:Array = [];
				
				var buttonObj:Object = {label:"Button", 
					children:[{label:"Properties:", children:buttonProperties},
						{label:"Methods:", children:buttonMethods},
						{label:"Styles:", children:buttonStyles},
						{label:"Events:", children:buttonEvents}]};
				
				/* ButtonBar */
				var buttonBarProperties:Array = [];
				var buttonBarMethods:Array = [];
				var buttonBarStyles:Array = [];
				var buttonBarEvents:Array = [];
				
				var buttonBarObj:Object = {label:"Button", 
					children:[{label:"Properties:", children:buttonBarProperties},
						{label:"Methods:", children:buttonBarMethods},
						{label:"Styles:", children:buttonBarStyles},
						{label:"Events:", children:buttonBarEvents}]};
				
				arrColl = new ArrayCollection([borderContainerObj, buttonObj, buttonBarObj]);
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="State1"/>
	</s:states>
	<fx:Declarations>
		<esri:DrawTool id="myDrawTool"
					   drawEnd="myDrawTool_drawEndHandler(event)"
					   graphicsLayer="{myGraphicsLayer}"
					   map="{map}">
			<esri:fillSymbol>
				<esri:SimpleFillSymbol id="yellowParcels"
									   color="0xFFFF00"
									   style="solid">
					<esri:SimpleLineSymbol width="1"/>
				</esri:SimpleFillSymbol>
			</esri:fillSymbol>
		</esri:DrawTool>
		
		<esri:GeometryService id="myGeometryService"
							  fault="myGeometryService_faultHandler(event)"
							  showBusyCursor="true"
							  simplifyComplete="myGeometryService_simplifyCompleteHandler(event)"
							  url="http://sampleserver6.arcgisonline.com/arcgis/rest/services/Utilities/Geometry/GeometryServer"/>
		
		<esri:QueryTask id="queryTask"
						executeComplete="queryTask_executeCompleteHandler(event)"
						fault="queryTask_faultHandler(event)"
						showBusyCursor="true"
						url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer/2"
						useAMF="false"/>
		<s:NumberFormatter id="numberFormatter" trailingZeros="false"/>
	</fx:Declarations>
	
	<s:controlBarLayout>
		<s:VerticalLayout gap="10"
						  horizontalAlign="center"
						  paddingBottom="7"
						  paddingLeft="10"
						  paddingRight="10"
						  paddingTop="7"/>
	</s:controlBarLayout>
	
	<s:controlBarContent>
		<s:VGroup width="100%" height="100%" horizontalAlign="center">
		<s:ButtonBar id="tbb" left="0" right="0" bottom="0" width="100%" height="50%"
					 change="tbb_changeHandler(event)" labelField="" selectedIndex="-1">
			<s:ArrayList>
				<fx:Object icon="@Embed(source='assets/i_draw_line.png')" label="POLYLINE"/>
				<fx:Object icon="@Embed(source='assets/i_draw_freeline.png')" label="FREEHAND_POLYLINE"/>
				<fx:Object icon="@Embed(source='assets/i_draw_poly.png')" label="POLYGON"/>
				<fx:Object icon="@Embed(source='assets/i_draw_freepoly.png')" label="FREEHAND_POLYGON"/>
				<fx:Object icon="@Embed(source='assets/i_draw_rect.png')" label="EXTENT"/>
				<fx:Object icon="@Embed(source='assets/i_draw_circle.png')" label="CIRCLE"/>
				<fx:Object icon="@Embed(source='assets/i_draw_ellipse.png')" label="ELLIPSE"/>
			</s:ArrayList>
		</s:ButtonBar>
		
		<!--<s:VGroup width="100%"
				  horizontalAlign="center">-->
			<!--<s:Label x="39" width="100%" height="25%" text="Search for parcels:"/>-->
			<s:ComboBox id="spatialRel" x="16" width="308" height="25%"
						dataProvider="{spatialRelationshipOptions_area}" requireSelection="true"/>
			<!--<mx:MenuBar width="95" height="35" 
						itemClick="menubar1_itemClickHandler(event)" labelField="@label" iconField="@icon">
				<mx:dataProvider>
					<fx:XMLList>
						<menuitem label="新建" icon="_addUser">
							<menuitem label="联系人" icon="_addUser">
								<menuitem label="联系人" icon="sendInfo"/>
								<menuitem label="联系人" icon="_addUser"/>
							</menuitem>
							<menuitem label="分组"/>
						</menuitem>
						<menuitem label="加入组" icon="_addGroup">
							<menuitem label="组一" />
							<menuitem label="组二"/>
							<menuitem label="组三"/>
							<menuitem label="组四"/>
							<menuitem type="separator"/>
							<menuitem label="新建联系组"/>
						</menuitem>
						<menuitem label="发送短消息" icon="_sendMessage"/>
						<menuitem label="编辑" icon="_editUser"/>
						<menuitem label="删除" icon="_deleteUser"/>
					</fx:XMLList>
				</mx:dataProvider>
			</mx:MenuBar>-->
			
			<mx:MenuBar id="mnBr" x="7" width="327" height="20" dataProvider="{arrColl}"
						iconField="icon" itemClick="menu_changeHandler(event)"
						labelField="label"/>	
			
		</s:VGroup>
	</s:controlBarContent>
	<esri:Map id="map">
		<esri:ArcGISDynamicMapServiceLayer url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer"/>
		<esri:GraphicsLayer id="myGraphicsLayer"/>
	</esri:Map>
	
	<s:DataGrid id="dg" right="20" top="20" width="280" alpha="0.5" visible="true">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="SCHLTXCD" headerText="SCHLTXCD"/>
				<s:GridColumn dataField="LNDVALUE"
							  headerText="LNDVALUE"/>
				<!--labelFunction="sumLabelFunction"/>-->
				<s:GridColumn width="49"
							  dataField="CNTASSDVAL"
							  headerText="Count"/>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<!--<mx:MenuBar  id="data" left="5" bottom="3" width="95" height="35"></mx:MenuBar>-->
</s:Panel>

