<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:esri="http://www.esri.com/2008/ags"
		 xmlns:flextras="http://www.flextras.com/mxml"
		 xmlns:skins="skins.*"
		 width="100%" height="100%" initialize="init();">
	<fx:Script>
		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.GeometryServiceEvent;
			import com.esri.ags.events.QueryEvent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.tasks.GeometryService;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.Query;
			import com.esri.ags.tasks.supportClasses.StatisticDefinition;
			import com.esri.ags.utils.GeometryUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.events.FaultEvent;
			import mx.events.MenuEvent;
			import mx.collections.ArrayCollection;
			
			import spark.components.CheckBox;
			import spark.events.IndexChangeEvent;
			
			import flash.sampler.NewObjectSample;
			
			
			[Bindable]
			public static var dgArr:ArrayCollection=new ArrayCollection();
			
			[Bindable]
			public static var searchValue:ArrayCollection = new ArrayCollection(
				[
					{ data: "OBJECTID", label: "OBJECTID" },
					{ data: "LOWPARCELID", label: "LOWPARCELID" },
					{ data: "PARCELID", label: "PARCELID" },
					{ data: "BUILDING", label: "BUILDING" },
					{ data: "UNIT", label: "UNIT" },
					{ data: "CVTTXCD", label: "CVTTXCD" },
					{ data: "CVTTXDSCRP", label: "CVTTXDSCRP" },
					{ data: "SCHLTXCD", label: "SCHLTXCD" },
					{ data: "SCHLDSCRP", label: "SCHLDSCRP" },
					{ data: "USECD", label: "USECD" },
					{ data: "USEDSCRP", label: "USEDSCRP" },
					{ data: "NGHBRHDCD", label: "NGHBRHDCD" },
					{ data: "CLASSCD", label: "CLASSCD" },
					{ data: "CLASSDSCRP", label: "CLASSDSCRP" },
					{ data: "SITEADDRESS", label: "SITEADDRESS" },
					{ data: "PRPRTYDSCRP", label: "PRPRTYDSCRP" },
					{ data: "CNVYNAME", label: "CNVYNAME" },
					{ data: "OWNERNME1", label: "OWNERNME1" },
					{ data: "OWNERNME2", label: "OWNERNME2" },
					{ data: "PSTLADDRESS", label: "PSTLADDRESS" },
					{ data: "PSTLCITY", label: "PSTLCITY" },
					{ data: "PSTLSTATE", label: "PSTLSTATE" },
					{ data: "PSTLZIP5", label: "PSTLZIP5" },
					{ data: "PSTLZIP4", label: "PSTLZIP4" },
					{ data: "RESFLRAREA", label: "RESFLRAREA" },
					{ data: "RESYRBLT", label: "RESYRBLT" },
					{ data: "RESSTRTYP", label: "RESSTRTYP" },
					{ data: "STRCLASS", label: "STRCLASS" },
					{ data: "CLASSMOD", label: "CLASSMOD" },
					{ data: "LNDVALUE", label: "LNDVALUE" },
					{ data: "PRVASSDVAL", label: "PRVASSDVAL" },
					{ data: "CNTASSDVAL", label: "CNTASSDVAL" },
					{ data: "ASSDVALYRCG", label: "ASSDVALYRCG" },
					{ data: "ASSDPCNTCG", label: "ASSDPCNTCG" },
					{ data: "PRVTXBLVAL", label: "PRVTXBLVAL" },
					{ data: "CNTTXBLVAL", label: "CNTTXBLVAL" },
					{ data: "TXBLVALYRCHG", label: "TXBLVALYRCHG" },
					{ data: "TXBLPCNTCHG", label: "TXBLPCNTCHG" },
					{ data: "PRVWNTTXOD", label: "PRVWNTTXOD" },
					{ data: "PRVSMRTXOD", label: "PRVSMRTXOD" },
					{ data: "TOTPRVTXTOD", label: "TOTPRVTXTOD" },
					{ data: "CNTWNTTXOD", label: "CNTWNTTXOD" },
					{ data: "CNTSMRTXOD", label: "CNTSMRTXOD" },
					{ data: "TOTCNTTXOD", label: "TOTCNTTXOD" },
					{ data: "TXODYRCHG", label: "TXODYRCHG" },
					{ data: "TXODPCNTCHG", label: "TXODPCNTCHG" },
					{ data: "LASTUPDATE", label: "LASTUPDATE" }
				]);
			
			
			[Embed("assets/i_draw_line.png")]
			public const Line:Class;
			
			[Embed("assets/i_draw_freeline.png")]
			public const FreeLine:Class;
			
			[Embed("assets/i_draw_poly.png")]
			public const Poly:Class;
			
			[Embed("assets/i_draw_freepoly.png")]
			public const FreePoly:Class;
			
			[Embed("assets/i_draw_rect.png")]
			public const Rect:Class;
			
			[Embed("assets/i_draw_circle.png")]
			public const Circle:Class;
			
			[Embed("assets/i_draw_ellipse.png")]
			public const Ellipse:Class;
			
			[Embed("assets/search.png")]
			public const Search:Class;
			
			[Embed("assets/select.png")]
			public const Select:Class;
			
			[Bindable]
			public static var arrColl:ArrayCollection;
			public var lookUpMethod:Array = [];
			public var currentLookUpMethod:String ="";
			
			[Bindable]
			public static var arrayOfSelection:Array = ["OBJECTID", "LOWPARCELID", "PARCELID", "BUILDING", "UNIT", "CVTTXCD", "CVTTXDSCRP", "SCHLTXCD", 
				"SCHLDSCRP", "USECD", "USEDSCRP", "NGHBRHDCD", "CLASSCD", "CLASSDSCRP", "SITEADDRESS", "PRPRTYDSCRP", "CNVYNAME", "OWNERNME1", "OWNERNME2", 
				"PSTLADDRESS", "PSTLCITY", "PSTLSTATE", "PSTLZIP5", "PSTLZIP4", "RESFLRAREA", "RESYRBLT", "RESSTRTYP", "STRCLASS", "CLASSMOD", "LNDVALUE", 
				"PRVASSDVAL", "CNTASSDVAL", "ASSDVALYRCG", "ASSDPCNTCG", "PRVTXBLVAL", "CNTTXBLVAL", "TXBLVALYRCHG", "TXBLPCNTCHG", "PRVWNTTXOD", "PRVSMRTXOD",
				"TOTPRVTXTOD", "CNTWNTTXOD", "CNTSMRTXOD", "TOTCNTTXOD", "TXODYRCHG", "TXODPCNTCHG","LASTUPDATE"];
			
			[Bindable]
			public static var selectionLabel1:String = "LNDVALUE";
			[Bindable]
			public static var selectionLabel2:String = "SCHLTXCD";
			[Bindable]
			public static var selectionLabel3:String = "CNTASSDVAL";
			[Bindable]
			public static var index1:int = 29;
			[Bindable]
			public static var index2:int = 7;
			[Bindable]
			public static var index3:int = 31;

			
			// Step 1 Draw something from menu
			protected function menu_changeHandler(event:MenuEvent):void
			{
				var selectedItem:String = event.label;
				if (mnBr.selectedIndex < 0)
				{
					myDrawTool.deactivate();
				}
				else
				{
					switch (selectedItem)
					{
						case "多段线":
						{
							myDrawTool.activate(DrawTool.POLYLINE);
							pushLineData();
							break;
						}
						case "自由画线":
						{
							myDrawTool.activate(DrawTool.FREEHAND_POLYLINE);
							pushLineData();
							break;
						}
						case "多边形":
						{
							myDrawTool.activate(DrawTool.POLYGON);
							pushPolyData();
							break;
						}
						case "自由多边形":
						{
							myDrawTool.activate(DrawTool.FREEHAND_POLYGON);
							pushPolyData();
							break;
						}
						case "长方形":
						{
							myDrawTool.activate(DrawTool.EXTENT);
							pushPolyData();
							break;
						}
						case "圆":
						{
							myDrawTool.activate(DrawTool.CIRCLE);
							pushPolyData();
							break;
						}
						case "椭圆":
						{
							myDrawTool.activate(DrawTool.ELLIPSE);
							pushPolyData();
							break;
						}
						case "贯穿画线":
						{
							currentLookUpMethod = Query.SPATIAL_REL_CROSSES;
							break;
						}
						case "与画线相交":
						{
							currentLookUpMethod = Query.SPATIAL_REL_INTERSECTS;
							break;
						}
						case "包含画线":
						{
							currentLookUpMethod = Query.SPATIAL_REL_WITHIN;
							break;
						}
						case "在所选区域之中":
						{
							currentLookUpMethod = Query.SPATIAL_REL_CONTAINS;
							break;
						}
						case "与所选区域相交或重叠":
						{
							currentLookUpMethod = Query.SPATIAL_REL_INTERSECTS;
							break;
						}
						case "与所选区域相交":
						{
							currentLookUpMethod = Query.SPATIAL_REL_OVERLAPS;
							break;
						}
						case "与所选区域重叠":
						{
							currentLookUpMethod = Query.SPATIAL_REL_WITHIN;
							break;
						}
						case "查询数据设置":
						{
							(new SettingPopup()).open(this, false);
							break;
						}
						case "清除":
						{
							myDrawTool.deactivate();
							myGraphicsLayer.clear();
							break;
						}
					}
				}
			}
			
			
			// Step 2. Make sure input polygon is topologically correct
			protected function myDrawTool_drawEndHandler(event:DrawEvent):void
			{
				// reset after finished drawing a feature				
				myDrawTool.deactivate();
				mnBr.selectedIndex = -1;
				var geometry:Geometry = event.graphic.geometry;
				if (geometry is Polygon && GeometryUtil.polygonSelfIntersecting(geometry as Polygon))
				{
					// Note: As of version 2.0, GeometryService returns geometries (instead of graphics).
					myGeometryService.simplify([ geometry ]);
				}
				else
				{
					doQuery(geometry);
				}
			}
			
			// Step 3 (only for polygons that are self intersecting).
			protected function myGeometryService_simplifyCompleteHandler(event:GeometryServiceEvent):void
			{
				// Note: As of version 2.0, GeometryService returns geometries (instead of graphics)
				doQuery(event.result[0] as Geometry);
			}
			
			// Step 4. query using drawn graphic
			protected function doQuery(geom:Geometry):void
			{
				try
				{
					var query:Query = new Query();
					query.spatialRelationship = currentLookUpMethod;
					query.outFields=["*"]
					query.geometry = geom;
					query.returnGeometry = true;
					queryTask.execute(query, new AsyncResponder(onResult, onFault));
					
					function onResult(featureSet:FeatureSet, token:Object = null):void
					{
						if (featureSet.features.length > 0)
						{
							for each (var myGraphic:Graphic in featureSet.features)
							{
								myGraphicsLayer.add(myGraphic);
							}
						}
						else
						{
							Alert.show("未发现地块", "请再选一次");
						}
					}
					function onFault(info:Object, token:Object = null):void
					{
						//Alert.show(info.faultString + "\n\n" + info.faultDetail, "queryTask fault " + info.faultCode);
					}
				}
				catch (error:Error)
				{
				//	Alert.show(error.toString(), "myGeometryService_simplifyCompleteHandler error");
					Alert.show("无法连接服务器");
				}
			}
			
			protected function queryTask_faultHandler(event:FaultEvent):void
			{
				Alert.show(event.fault.faultString + "\n\n" + event.fault.faultDetail, "QueryTask Fault " + event.fault.faultCode);
			}
			
			protected function myGeometryService_faultHandler(event:FaultEvent):void
			{
				Alert.show(event.fault.faultString + "\n\n" + event.fault.faultDetail, "GeometryService Fault " + event.fault.faultCode);
			}
			

			
			protected function queryTask_executeCompleteHandler(event:QueryEvent):void
			{
				var fields:Array = event.featureSet.fields;
				var attributes:Array = event.featureSet.attributes;				
				 dgArr= new ArrayCollection(attributes);
				 resultPanel.arr=dgArr;

			}

			
			
			protected function pushLineData():void {
				if(lookUpMethod.length == 4){
					lookUpMethod.pop();
					lookUpMethod.pop();
					lookUpMethod.pop();
					lookUpMethod.pop();
				}else
				if(lookUpMethod.length == 3){
					lookUpMethod.pop();
					lookUpMethod.pop();
					lookUpMethod.pop();
				}
				lookUpMethod.push({ data: Query.SPATIAL_REL_CROSSES, label: "贯穿画线"});
				lookUpMethod.push({ data: Query.SPATIAL_REL_INTERSECTS, label: "与画线相交" });
				lookUpMethod.push({ data: Query.SPATIAL_REL_WITHIN, label: "包含画线" });
				currentLookUpMethod = Query.SPATIAL_REL_CROSSES;
			}
			
			protected function pushPolyData():void {
				if(lookUpMethod.length == 4){
					lookUpMethod.pop();
					lookUpMethod.pop();
					lookUpMethod.pop();
					lookUpMethod.pop();
				}else
				if(lookUpMethod.length == 3){
					lookUpMethod.pop();
					lookUpMethod.pop();
					lookUpMethod.pop();
				}
				lookUpMethod.push({ data: Query.SPATIAL_REL_CONTAINS, label: "在所选区域之中" });
				lookUpMethod.push({ data: Query.SPATIAL_REL_INTERSECTS, label: "与所选区域相交或重叠" });
				lookUpMethod.push({ data: Query.SPATIAL_REL_OVERLAPS, label: "与所选区域相交" });
				lookUpMethod.push({ data: Query.SPATIAL_REL_WITHIN, label: "与所选区域重叠" });
				currentLookUpMethod = Query.SPATIAL_REL_CONTAINS;
			}
			
			protected function init():void {
				this.setStyle("headerHeight", 0);
				
				
				/* BorderContainer */
				var selectTool:Array = [];
				selectTool.push({label:"多段线", icon:Line});
				selectTool.push({label:"自由画线", icon:FreeLine});
				selectTool.push({label:"多边形", icon:Poly});
				selectTool.push({label:"自由多边形", icon:FreePoly});
				selectTool.push({label:"长方形", icon:Rect});
				selectTool.push({label:"圆", icon:Circle});
				selectTool.push({label:"椭圆", icon:Ellipse});
				
				var borderContainerMethods:Array = [];
				borderContainerMethods.push({label:"清除"});
				
				var menu:Object = {label:"选定区域         ", icon:Select ,
					children:[{label:"选择工具:", children:selectTool},
						{label:"选定方法:", children:lookUpMethod},
						{label:"重新画图:", children:borderContainerMethods}]};
				
				/* Button */
				var buttonEvents:Array = [];
				buttonEvents.push({label:"查询数据设置"});
				
				var buttonBarObj:Object = {label:"查询数据", icon:Search, children: buttonEvents};
				
				arrColl = new ArrayCollection([menu, buttonBarObj]);
			}
			

			
			public static function updateSelection1(e:IndexChangeEvent):void
			{
				var selectedIndex:int = e.newIndex;
				var selectedItem:String = mapPanel.searchValue.getItemAt(selectedIndex).data;
				selectionLabel1 = selectedItem;
				index1 = arrayOfSelection.indexOf(selectionLabel1);
			}
			
			public static function updateSelection2(e:IndexChangeEvent):void
			{
				var selectedIndex:int = e.newIndex;
				var selectedItem:String = mapPanel.searchValue.getItemAt(selectedIndex).data;
				selectionLabel2 = selectedItem;
				index2 = arrayOfSelection.indexOf(selectionLabel2);
			}
			
			public static function updateSelection3(e:IndexChangeEvent):void
			{
				var selectedIndex:int = e.newIndex;
				var selectedItem:String = mapPanel.searchValue.getItemAt(selectedIndex).data;
				selectionLabel3 = selectedItem;
				index3 = arrayOfSelection.indexOf(selectionLabel3);
			}
		]]>
	</fx:Script>
	<s:states>
		<s:State name="State1"/>
	</s:states>
	<fx:Declarations>
		<esri:DrawTool id="myDrawTool"
					   drawEnd="myDrawTool_drawEndHandler(event)"
					   graphicsLayer="{myGraphicsLayer}"
					   map="{map}">
			<esri:fillSymbol>
				<esri:SimpleFillSymbol id="yellowParcels"
									   color="0xFFFF00"
									   style="solid">
					<esri:SimpleLineSymbol width="1"/>
				</esri:SimpleFillSymbol>
			</esri:fillSymbol>
		</esri:DrawTool>
		
		<esri:GeometryService id="myGeometryService"
							  fault="myGeometryService_faultHandler(event)"
							  showBusyCursor="true"
							  simplifyComplete="myGeometryService_simplifyCompleteHandler(event)"
							  url="http://sampleserver6.arcgisonline.com/arcgis/rest/services/Utilities/Geometry/GeometryServer"/>
		
		<esri:QueryTask id="queryTask"
						executeComplete="queryTask_executeCompleteHandler(event)"
						fault="queryTask_faultHandler(event)"
						showBusyCursor="true"
						url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer/2"
						useAMF="false"/>
		<s:NumberFormatter id="numberFormatter" trailingZeros="false"/>
	</fx:Declarations>
	
	<mx:MenuBar id="mnBr" width="80%" height="5%" dataProvider="{arrColl}" horizontalCenter="0"
				iconField="icon" itemClick="menu_changeHandler(event)" labelField="label"/>
	<esri:Map id="map" bottom="0" width="100%" height="96%" horizontalCenter="0">
				<esri:ArcGISDynamicMapServiceLayer url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer"/>
				<esri:GraphicsLayer id="myGraphicsLayer"/>
			</esri:Map>
	<fx:Declarations>
		<fx:Component className="SettingPopup">
			<s:SkinnablePopUpContainer x="70" y="250">
				<s:Panel title="查询数据设置"  width="500" height="460" id="selectionPanel" verticalCenter="0" horizontalCenter="0">
					<s:VGroup width="100%" height="100%" horizontalAlign="center"
							  paddingTop="20" gap="15">
						<s:Label text="数据1"/>
						<flextras:DropDownList id="selection1" width="80%" height="30" requireSelection="true" selectedIndex="{mapPanel.index1}"
										 dataProvider="{mapPanel.searchValue}" change="mapPanel.updateSelection1(event);"/>
						<s:Label text="数据2"/>
						<flextras:DropDownList id="selection2"  width="80%" height="30" requireSelection="true" selectedIndex="{mapPanel.index2}"
											   dataProvider="{mapPanel.searchValue}" change="mapPanel.updateSelection2(event);"/>
						<s:Label text="数据3"/>
						<flextras:DropDownList id="selection3"  width="80%" height="30" requireSelection="true" selectedIndex="{mapPanel.index3}"
											   dataProvider="{mapPanel.searchValue}" change="mapPanel.updateSelection3(event);"/>
						<s:Button label="确定" height="50" width="200" click="close();" />
					</s:VGroup>
				</s:Panel>
			</s:SkinnablePopUpContainer>
		</fx:Component>
	</fx:Declarations>
</s:Group>


